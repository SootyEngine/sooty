// Comments start with //.
=== flow_node
	Text without a speaker. //#jbpggt5p
	
	// Speakers.
	john: Text spoken by John. //#64yw4j4r
	: Text spoken by last speaker, John. //#wkgwyrxo
	
	// Markdown formatting.
	Some *italic*, **bold** and ***bold italic*** text. //#0ad2gs7e
	
	// BBCode.
	Some [b;tomato]bold red text[] and some [i;deep_sky_blue]italic blue text.[] //#t0ndrvgo
	
	// Inserting state values to text.
	The current score is [$score;b;cyan]. //#mgvyozgd
	
	// Effecting the animation.
	We can pause[wait] the text. //#okay
	We can hold until the user presses something.[hold] And then show some more text. //#1234
	We can [pace=2]speed up the speed of the speaker.[pace=0.25] Or slow it down. //#zznmo4uw
	
	// Calling actions at points in the animation.
	Actions can be called at a point [~camera zoom 2.0]. Got it? //#u3ef49mj
	Like any other tag [~camera zoom;~camera shake;~$score += 20] you can combine multiple in one. //#nlajji8c
	
	// Multiline text.
	"""" //#llxx9c0e
	You can place *lots* of formatted text in one block.
			*Tabs*
				will
					be
						preserved.
	
	As will **whitespace**.
	""""
	
	paul: """" {{$score > 20}} //#02c8ujhk
	I don't care what [b]they say, it's not happening.
	
	(He turned to look at the shore.)
	
	Not now, not ever.
	""""
	
	// Flow control.
	=> goto_flow // Goto a flow.
	== call_flow // Call a flow, then return back to this line.
	
	// Action: State assignment
	~$score += 20
	~$time.day += 1
	// Action: State methods.
	~$time.goto_next_day
	~$player.set_job baker tint:beige pay:12.50
	
	// Action: Global methods.
	~camera shake $x time:3.0 wait:true x:$y // nodes_in_group("sa:camera").camera("shake", x, { "wait": true, "x": y})
	~camera.shake $x time:3.0 wait:true x:$y // nodes_in_group("sa:camera").shake(x, { "wait": true, "x": y })
	
	// BBCode with actions.
	Wait a minute, that means[~camera.zoom 1;b;i;~$score += 20] this was a...[~camera.zoom] murder! //#q5txeq9k
	
	// Conditions: if-elif-else
	Line only shown if condition is met. {{$score > 20}} //#64ffsjep
	
	{{$score > 20}}
		Multiple lines. //#7rpi62d5
		Together under one conditional. //#9i0348sb
	{{elif $score == 10}}
		Score is ten. //#qov5km6w
	{{else}}
		A line to show instead.
	
	// Conditions: match
	{{*$time.weekday}}
		{{MONDAY}} ((~sfx sad_audio))
		{{TUESDAY}} ((john: Glad [b]mondays[] over.)) //#VFKsKrJg
		{{WEDNESDAY}} ((It's the middle of the week.)) //#Bd2whfKf
		{{THURSDAY}}
			john: The whole vibe shifts on thursday! //#xeqamglx
		{{FRIDAY}} ((~sfx happy_audio))
			john: Aw yeah, friday! //#b81q5fr2
		{{_}} ((It's the weekend.)) //#n3VftOuj
	
	// Options.
	Text for an options menu. //#jdwgtt7g
		<> Option one. ((~$choice = true)) => flow //#v4lr1k88
			A line to show after option 1 is chosen. //#kzackpnz
		<> Option two. ((~$score += 10;;== add_to_flow;;~$score -= 20)) //#xkgr6p0p
		<> Option three. {{$score > 20}} // Only shown on condition score > 20. //#zowe5syc
		<++> add_options_from_a_flow //#wjw26m8p
		<++> *_flow // Append options from all flows ending with '_flow'. //#jc0ubr37
		<++> flow_* // Append options from all flows starting with 'flow_' //#5auugqcx
	
	// Single line options.
	Where to? ((<> West => west;;<> East => east {{$east.unlocked}};;<> North => north)) //#gWWXVWKm
	
	// Extra properties.
	This text should be offset. //#bcv11knr
		|x:20 y:30
		|tint:red
	
	// Or, on a single line.
	This text should be offset. ((|x:20 y:30 tint:red)) //#3sjsyx0z
